public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Person pr = new Person(18, "man");
		System.out.println(pr.toString());
		Student st = new Student(18, "man", "student", "Karpenko", 60);
		System.out.println(st.toString());
		System.out.println();
		Group gr = new Group();

		for (int i = 0; i < 2; i++) {
			System.out.println("Add new student in this group!!!");
			System.out.println("Input Age person!!!");
			int age = sc.nextInt();
			System.out.println("Input Sex person!!!");
			String sex = sc.nextLine();
			sex = sc.nextLine();
			System.out.println("Input Job person!!!");
			String job = sc.nextLine();
			System.out.println("Input Surname person!!!");
			String surname = sc.nextLine();
			System.out.println("Input Rating person!!!");
			int rating = sc.nextInt();
			try {
				gr.addStudent(age, sex, job, surname, rating);
			} catch (MyException e) {
				System.out.println(e.getMessage());
			}
		}

		System.out.println();
		System.out.println("Which student will you want delete?");
		String surname = sc.nextLine();
		surname = sc.nextLine();
		gr.delStudent(surname);
		System.out.println();

		System.out.println("Which student will you want find?");
		surname = sc.nextLine();
		System.out.println(gr.findStudent(surname));
		System.out.println();

		System.out.println("Group sort by surname!!!");
		gr.sortGroupToName();
		System.out.println();

		System.out.println("Group sort by rating!!!");
		gr.sortGroupToRating();
		System.out.println();

		System.out.println("In soldiers!!!");
		Student[] group = gr.inSoldiers();
		for (Student student : group) {
			System.out.println(student);
		}
	}
}

public class Person {
	private int age;
	private String sex;

	public Person(int age, String sex) {
		super();
		this.age = age;
		this.sex = sex;
	}

	public Person() {
		super();
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getSex() {
		return sex;
	}

	public void setSex(String sex) {
		this.sex = sex;
	}

	public String toString() {
		return "Person-Age-" + age + ", Sex-" + sex + ",";
	}

}

public class Student extends Person {
	private String job;
	private String surname;
	private int rating;

	public Student(int age, String sex, String job, String surname, int rating) {
		super(age, sex);
		this.job = job;
		this.surname = surname;
		this.rating = rating;
	}

	public String getJob() {
		return job;
	}

	public void setJob(String job) {
		this.job = job;
	}

	public String getSurname() {
		return surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	public int getRating() {
		return rating;
	}

	public void setRating(int rating) {
		this.rating = rating;
	}

	@Override
	public String toString() {
		return super.toString() + " Job-" + job + ", Surname-" + surname + ", Rating-" + rating + ";";
	}

}

public class StudentSurname implements Comparator<Student> {
	@Override
	public int compare(Student a, Student b) {
		// TODO Auto-generated method stub
		return a.getSurname().compareTo(b.getSurname());
	}
}

public class StudentRating implements Comparator<Student> {
	@Override
	public int compare(Student a, Student b) {
		// TODO Auto-generated method stub
		if (a.getRating() > b.getRating())
			return -1;
		else if (a.getRating() < b.getRating())
			return 1;
		else
			return 0;
	}
}

public class Group implements MilitaryCommittee {

	private Student stOne = new Student(17, "man", "student", "Ivanov", 60);
	private Student stTwo = new Student(19, "man", "student", "Petrenko", 75);
	private Student stThree = new Student(17, "man", "student", "Loginov", 85);
	private Student stFour = new Student(18, "man", "student", "Akimov", 90);
	private Student stFive = new Student(20, "man", "student", "Polyakov", 95);
	private Student stSix = new Student(21, "woman", "student", "Marchuk", 70);
	private Student stSeven = new Student(23, "woman", "student", "Dronova", 82);
	private Student stEight = new Student(17, "man", "student", "Logvinchuk", 55);
	private Student stNine = new Student(22, "man", "student", "Makarov", 78);
	private Student[] group = { stOne, stTwo, stThree, stFour, stFive, stSix, stSeven, stEight, stNine, null };

	public void addStudent(int age, String sex, String job, String surname, int rating) throws MyException {
		if (group[group.length - 1] != null) {
			throw new MyException();
		}
		for (int i = 0; i < group.length; i++) {
			if (group[i] == null) {
				group[i] = new Student(age, sex, job, surname, rating);
			}
		}
		for (int i = 0; i < group.length; i++) {
			System.out.println(group[i]);
		}
	}

	public void delStudent(String surname) {
		boolean qvest = false;
		for (int i = 0; i < group.length; i++) {
			qvest = String.valueOf(group[i]).contains(surname);
			if (qvest == true) {
				group[i] = null;
				break;
			}
		}
		if (qvest == false || surname.length() == 0) {
			System.out.println("This student isn't in group!!!");
			return;
		}
		for (int i = 0; i < group.length; i++) {
			if (group[i] != null) {
				System.out.println(group[i]);
			}
		}
	}

	public Student findStudent(String surname) {
		boolean qvest = false;
		int i;
		for (i = 0; i < group.length; i++) {
			qvest = String.valueOf(group[i]).contains(surname);
			if (qvest == true) {
				break;
			}
		}
		if (qvest == false) {
			System.out.println("This student isn't in group!!!");
		}
		return group[i];
	}

	public void sortGroupToName() {
		Comparator<Student> cm = new StudentSurname();
		TreeSet<Student> groupNew = new TreeSet(cm);
		for (int i = 0; i < group.length; i++) {
			if (group[i] != null) {
				groupNew.add(group[i]);
			}
		}
		for (Student student : groupNew) {
			System.out.println(student);
		}
	}

	public void sortGroupToRating() {
		Comparator<Student> cm = new StudentRating();
		TreeSet<Student> groupNew = new TreeSet(cm);
		for (int i = 0; i < group.length; i++) {
			if (group[i] != null) {
				groupNew.add(group[i]);
			}
		}
		for (Student student : groupNew) {
			System.out.println(student);
		}
	}

	@Override
	public Student[] inSoldiers() {
		int j = 0;
		for (int i = 0; i < group.length; i++) {
			if (group[i] != null) {
				if (group[i].getSex() == "man" && group[i].getAge() > 18) {
					j++;
				}
			}
		}
		Student[] soldiers = new Student[j];
		int k = 0;
		for (int i = 0; i < group.length; i++) {
			if (group[i] != null) {
				if (group[i].getSex() == "man" && group[i].getAge() > 18) {
					soldiers[k] = group[i];
					k++;
				}
			}
		}
		return soldiers;
	}
}

public interface MilitaryCommittee {
	public Student[] inSoldiers();
}

public class MyException extends Exception {
	@Override
	public String getMessage() {
		return "Warning this Group is full already!!!";
	}
}
